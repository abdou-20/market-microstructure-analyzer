name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
    
    - name: Run linting
      run: |
        pip install flake8 black isort mypy
        # Stop the build if there are Python syntax errors or undefined names
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Check code formatting
        black --check src/
        # Check import sorting
        isort --check-only src/
    
    - name: Run type checking
      run: |
        # Type checking with mypy (allow failures for now)
        mypy src/ || true
    
    - name: Run tests
      run: |
        pip install pytest pytest-cov
        # Run core component tests
        python -c "
import sys
import os
sys.path.append('src')
try:
    # Test core imports
    from data_processing.order_book_parser import create_synthetic_order_book_data
    from data_processing.feature_engineering import FeatureEngineering
    from models.transformer_model import create_transformer_model
    from models.lstm_model import create_lstm_model
    from training.directional_optimizer import DirectionalLSTM
    from inference import ModelServer, DataStreamer
    print('✅ All core imports successful')
except Exception as e:
    print(f'❌ Import test failed: {e}')
    sys.exit(1)
"
    
    - name: Test model initialization
      run: |
        python -c "
import sys
sys.path.append('src')
from inference import ModelServer
try:
    server = ModelServer()
    health = server.health_check()
    assert health['status'] == 'healthy'
    server.shutdown()
    print('✅ Model server test passed')
except Exception as e:
    print(f'❌ Model server test failed: {e}')
    sys.exit(1)
"
    
    - name: Test data processing
      run: |
        python -c "
import sys
sys.path.append('src')
from data_processing.order_book_parser import create_synthetic_order_book_data
from data_processing.feature_engineering import FeatureEngineering
try:
    snapshots = create_synthetic_order_book_data(100)
    fe = FeatureEngineering()
    features = fe.extract_features(snapshots)
    assert len(features) > 0
    print('✅ Data processing test passed')
except Exception as e:
    print(f'❌ Data processing test failed: {e}')
    sys.exit(1)
"

  integration-test:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -e .
    
    - name: Test run script functionality
      run: |
        chmod +x run.sh
        # Test basic functionality (without full demo to save time)
        ./run.sh --status
        ./run.sh --setup
    
    - name: Test Phase 6 inference system
      run: |
        # Run the simple Phase 6 test
        python test_phase6_simple.py
    
    - name: Upload test artifacts
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: test-artifacts
        path: |
          outputs/
          *.log

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Run security scan
      uses: pypa/gh-action-pip-audit@v1.0.8
      with:
        inputs: requirements.txt

  build-docs:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install sphinx sphinx-rtd-theme
    
    - name: Generate documentation
      run: |
        # Create basic docs structure if it doesn't exist
        mkdir -p docs
        echo "# Documentation" > docs/README.md
        echo "Documentation generation completed"
    
    - name: Deploy to GitHub Pages
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs